# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy JAR app to Azure - shopper-buddy-user-service

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }} # anothrNick: required for better experience using pre-releases
          fetch-depth: '0' # anothrNick: to be sure you retrieve all commits to look for the semver commit message.

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '20'

      - name: Build with Maven # and export resulting jar file to environment variable.
        run: | 
          mvn clean install
          JAR_FILE=$(ls target/*.jar | grep -v '.original')  
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID  }}
          password: ${{ secrets.AZURE_CLIENT_SECRET  }}

      - name: debug target jar
        run: | 
          ls -al 
          ls -al target

      - name: Build Docker application image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}:latest
          build-args: |
            JAR_FILE=${{ env.JAR_FILE }}

      # If a commit message contains #major, #minor, #patch, or #none, it will trigger the respective version bump.
      - name: Bump version and push tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # github_token is made available by the github actions environment
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main

      - name: Tag and Push Docker images
        run: |
          docker tag ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}:latest ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}:${{ steps.create_tag.outputs.new_tag }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}:${{ steps.create_tag.outputs.new_tag }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # This is intended to be the one set by anothrNick plugin in previous job. Here we dont have access to the plugins output.
      - name: Get latest tag
        id: latest_tag
        run: |
          set -e
          echo "LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV
    
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
    
      - name: 'Get AKS credentials'
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ vars.CLUSTER_NAME }}
          resource-group: ${{ vars.CLUSTER_RESOURCE_GROUP }}

      - uses: microsoft/variable-substitution@v1
        with:
          files: 'helm/charts/shopper-buddy/Chart.yaml, helm/charts/shopper-buddy/values.yaml'
        env:
          subdomains: ${{ vars.DOMAINS }}
          #subdomains: "example.org,example.com,example.eu"
          name: ${{ vars.APPLICATION_NAME }}
          description: ${{ vars.APP_DESCRIPTION}}
          appVersion: ${{ env.LATEST_TAG }}
          image.repository: ${{ secrets.ACR_LOGIN_SERVER }}/${{ vars.APPLICATION_NAME }}
          image.tag: ${{ env.LATEST_TAG }}
          google.googleClientID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
          google.googleClientSecret: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}


      # Deploying the application
      - name: 'Deploy to AKS'
        run: |
          kubectl create namespace ${{ vars.APPLICATION_NAME }} --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install ${{ vars.APPLICATION_NAME }} ./helm/charts/${{ vars.APPLICATION_NAME }} \
              --set image.tag="${{ env.LATEST_TAG }}" \
              --namespace ${{ vars.APPLICATION_NAME }} \
              --wait \
              --timeout 600s \
              --atomic
